plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.20'
    id 'net.neoforged.gradle.common' version '7.0.165'
    id 'net.neoforged.gradle.mixin' version '7.0.165'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id
base.archivesName = mod_id

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

mixin {config "${mod_id}.mixins.json"}

configurations {runtimeClasspath.extendsFrom localRuntime}

repositories {
    mavenLocal()

    maven {
        name "CurseForge"
        url "https://www.cursemaven.com"
        content {includeGroup "curse.maven"}
    }
    maven {
        name "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {includeGroup "maven.modrinth"}
    }
    maven {
        name "Shadows"
        url "https://maven.shadowsoffire.dev/releases"
        content {includeGroup "dev.shadowsoffire"}
    }
    maven {
        name "JEI"
        url 'https://maven.blamejared.com/'
        content {includeGroup "mezz.jei"}
    }
}

dependencies {
    //implementation "dev.shadowsoffire:Placebo:${minecraft_version}-${placebo_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    runtimeOnly "curse.maven:jade-324717:${jade_id}"
//    runtimeOnly "curse.maven:modern-ui-352491:${modernui_id}"
//    runtimeOnly "maven.modrinth:sodium:${sodium_version}-neoforge"

}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]

    inputs.properties replaceProperties


    filesMatching('neoforge.mods.toml') {
        expand replaceProperties
        name 'META-INF/neoforge.mods.toml'
    }

    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            srcDir(generateModMetadata)
        }
    }
}

neoForge.ideSyncTask generateModMetadata

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    interfaceInjectionData.from "src/main/templates/interface_injection.json"
    validateAccessTransformers = true
    accessTransformers.from 'src/main/resources/META-INF/accesstransformer.cfg'

    runs {
        client {
            client()
            gameDirectory = file("run/client")
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            gameDirectory = file("run/server")
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            systemProperty("tfc.enableDebugSelfTests", "true")
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}



publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
